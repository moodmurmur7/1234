export enum QuestionType {
  MULTIPLE_CHOICE = 'MULTIPLE_CHOICE',
  TRUE_FALSE = 'TRUE_FALSE',
  FILL_IN_BLANK = 'FILL_IN_BLANK',
  MATCHING = 'MATCHING',
  SHORT_ANSWER = 'SHORT_ANSWER'
}

export enum DifficultyLevel {
  EASY = 'EASY',
  MEDIUM = 'MEDIUM',
  HARD = 'HARD'
}

export type QuestionOption = {
  id: string;
  text: string;
  latex?: string;
};

export type MatchingPair = {
  id: string;
  premise: string;
  response: string;
};

export type FillInBlankAnswer = {
  id: string;
  answer: string;
  alternatives?: string[];
};

export type Question = {
  id: string;
  type: QuestionType;
  text: string;
  latex?: string;
  options?: QuestionOption[];
  correctOptionIndex?: number;
  imagePath?: string | null;
  difficultyLevel?: DifficultyLevel;
  // For true/false questions
  correctAnswer?: boolean;
  // For matching questions
  matchingPairs?: MatchingPair[];
  // For fill in the blank
  blanks?: FillInBlankAnswer[];
  // For short answer
  modelAnswer?: string;
  keywords?: string[];
  // Metadata
  tags?: string[];
  createdBy?: string;
  lastModified?: string;
  inQuestionBank?: boolean;
};

export type Section = {
  id: string;
  title: string;
  description?: string;
  questions: Question[];
  timeLimit?: number; // in minutes
  shuffleQuestions?: boolean;
};

export type TestSettings = {
  title: string;
  description: string;
  duration: number; // in minutes
  shuffleQuestions: boolean;
  shuffleOptions: boolean;
  freeNavigation: boolean;
  requireFullscreen: boolean;
  sections?: Section[];
  collaborators?: string[];
};

export type Test = {
  id: string;
  settings: TestSettings;
  questions: Question[];
  sections?: Section[];
  createdAt: string;
  lastModified: string;
  createdBy: string;
  collaborators?: string[];
  analytics?: TestAnalytics;
};

export type TestAnalytics = {
  totalQuestions: number;
  autoGenerated: number;
  manuallyAdded: number;
  edited: number;
  questionTypes: Record<QuestionType, number>;
  difficultyLevels: Record<DifficultyLevel, number>;
};

export type TestResult = {
  id: string;
  testId: string;
  testTitle: string;
  totalQuestions: number;
  correctAnswers: number;
  timeTaken: number; // in seconds
  submittedAt: string;
  answers: Record<string, number | boolean | string | string[]>; // questionId -> answer
  violations: number;
  sectionResults?: {
    sectionId: string;
    timeSpent: number;
    correctAnswers: number;
  }[];
};

export enum SecurityViolationType {
  EXIT_FULLSCREEN = 'EXIT_FULLSCREEN',
  TAB_SWITCH = 'TAB_SWITCH',
  COPY_PASTE = 'COPY_PASTE',
  PAGE_RELOAD = 'PAGE_RELOAD',
}

export type SecurityViolation = {
  type: SecurityViolationType;
  timestamp: string;
};

export type QuestionBank = {
  id: string;
  name: string;
  questions: Question[];
  createdBy: string;
  collaborators?: string[];
  lastModified: string;
};

export type ExportFormat = 'PDF' | 'GOOGLE_FORMS' | 'MOODLE' | 'WORD';

export type ExportOptions = {
  format: ExportFormat;
  includeAnswers: boolean;
  includeDifficulty: boolean;
  includeMetadata: boolean;
};